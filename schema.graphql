### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneRoutine(data: RoutineCreateInput!): Routine!
  createOneUser(data: UserCreateInput!): User!
  createOneUserAccount(data: UserAccountCreateInput!): UserAccount!
  deleteOneRoutine(where: RoutineWhereUniqueInput!): Routine
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserAccount(where: UserAccountWhereUniqueInput!): UserAccount
  updateOneRoutine(data: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserAccount(data: UserAccountUpdateInput!, where: UserAccountWhereUniqueInput!): UserAccount
  upsertOneRoutine(create: RoutineCreateInput!, update: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserAccount(create: UserAccountCreateInput!, update: UserAccountUpdateInput!, where: UserAccountWhereUniqueInput!): UserAccount!
}

input NfcCreateOneWithoutUserNfcInput {
  connect: NfcWhereUniqueInput
  create: NfcCreateWithoutUserNfcInput
}

input NfcCreateWithoutUserNfcInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  value: String!
}

input NfcUpdateOneRequiredWithoutUserNfcInput {
  connect: NfcWhereUniqueInput
  create: NfcCreateWithoutUserNfcInput
  update: NfcUpdateWithoutUserNfcDataInput
  upsert: NfcUpsertWithoutUserNfcInput
}

input NfcUpdateWithoutUserNfcDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  value: String
}

input NfcUpsertWithoutUserNfcInput {
  create: NfcCreateWithoutUserNfcInput!
  update: NfcUpdateWithoutUserNfcDataInput!
}

input NfcWhereUniqueInput {
  id: Int
  value: String
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum Provider {
  kakao
}

type Query {
  routine(id: ID): Routine
  routines(after: RoutineWhereUniqueInput, before: RoutineWhereUniqueInput, first: Int, last: Int, skip: Int): [Routine!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

input Result_timestampCreateOneWithoutResultInput {
  connect: Result_timestampWhereUniqueInput
  create: Result_timestampCreateWithoutResultInput
}

input Result_timestampCreateWithoutResultInput {
  createdAt: DateTime
  deletedAt: DateTime
  firstTagging: DateTime!
  lastTagging: DateTime!
  updatedAt: DateTime
}

input Result_timestampUpdateOneWithoutResultInput {
  connect: Result_timestampWhereUniqueInput
  create: Result_timestampCreateWithoutResultInput
  delete: Boolean
  disconnect: Boolean
  update: Result_timestampUpdateWithoutResultDataInput
  upsert: Result_timestampUpsertWithoutResultInput
}

input Result_timestampUpdateWithoutResultDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  firstTagging: DateTime
  id: Int
  lastTagging: DateTime
  updatedAt: DateTime
}

input Result_timestampUpsertWithoutResultInput {
  create: Result_timestampCreateWithoutResultInput!
  update: Result_timestampUpdateWithoutResultDataInput!
}

input Result_timestampWhereUniqueInput {
  id: Int
}

input ResultCreateManyWithoutUserNfcUserInput {
  connect: [ResultWhereUniqueInput!]
  create: [ResultCreateWithoutUserNfcUserInput!]
}

input ResultCreateWithoutUserNfcUserInput {
  createdAt: DateTime
  date: DateTime!
  deletedAt: DateTime
  resultTimestamp: Result_timestampCreateOneWithoutResultInput
  updatedAt: DateTime
}

input ResultScalarWhereInput {
  AND: [ResultScalarWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: IntFilter
  NOT: [ResultScalarWhereInput!]
  OR: [ResultScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input ResultUpdateManyDataInput {
  createdAt: DateTime
  date: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ResultUpdateManyWithoutUserNfcUserInput {
  connect: [ResultWhereUniqueInput!]
  create: [ResultCreateWithoutUserNfcUserInput!]
  delete: [ResultWhereUniqueInput!]
  deleteMany: [ResultScalarWhereInput!]
  disconnect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutUserNfcUserInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutUserNfcUserInput!]
}

input ResultUpdateManyWithWhereNestedInput {
  data: ResultUpdateManyDataInput!
  where: ResultScalarWhereInput!
}

input ResultUpdateWithoutUserNfcUserDataInput {
  createdAt: DateTime
  date: DateTime
  deletedAt: DateTime
  id: Int
  resultTimestamp: Result_timestampUpdateOneWithoutResultInput
  updatedAt: DateTime
}

input ResultUpdateWithWhereUniqueWithoutUserNfcUserInput {
  data: ResultUpdateWithoutUserNfcUserDataInput!
  where: ResultWhereUniqueInput!
}

input ResultUpsertWithWhereUniqueWithoutUserNfcUserInput {
  create: ResultCreateWithoutUserNfcUserInput!
  update: ResultUpdateWithoutUserNfcUserDataInput!
  where: ResultWhereUniqueInput!
}

input ResultWhereUniqueInput {
  id: Int
}

type Routine {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  name: String!
  updatedAt: DateTime!
  user: User!
}

input RoutineCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutRoutinesInput!
  userNfcRoutine: User_nfc_routineCreateOneWithoutRoutineInput!
}

input RoutineCreateManyWithoutUserInput {
  connect: [RoutineWhereUniqueInput!]
  create: [RoutineCreateWithoutUserInput!]
}

input RoutineCreateOneWithoutUserNfcRoutineInput {
  connect: RoutineWhereUniqueInput
  create: RoutineCreateWithoutUserNfcRoutineInput
}

input RoutineCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
  userNfcRoutine: User_nfc_routineCreateOneWithoutRoutineInput!
}

input RoutineCreateWithoutUserNfcRoutineInput {
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutRoutinesInput!
}

input RoutineScalarWhereInput {
  AND: [RoutineScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [RoutineScalarWhereInput!]
  OR: [RoutineScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input RoutineUpdateInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutRoutinesInput
  userNfcRoutine: User_nfc_routineUpdateOneRequiredWithoutRoutineInput
}

input RoutineUpdateManyDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input RoutineUpdateManyWithoutUserInput {
  connect: [RoutineWhereUniqueInput!]
  create: [RoutineCreateWithoutUserInput!]
  delete: [RoutineWhereUniqueInput!]
  deleteMany: [RoutineScalarWhereInput!]
  disconnect: [RoutineWhereUniqueInput!]
  set: [RoutineWhereUniqueInput!]
  update: [RoutineUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RoutineUpdateManyWithWhereNestedInput!]
  upsert: [RoutineUpsertWithWhereUniqueWithoutUserInput!]
}

input RoutineUpdateManyWithWhereNestedInput {
  data: RoutineUpdateManyDataInput!
  where: RoutineScalarWhereInput!
}

input RoutineUpdateOneRequiredWithoutUserNfcRoutineInput {
  connect: RoutineWhereUniqueInput
  create: RoutineCreateWithoutUserNfcRoutineInput
  update: RoutineUpdateWithoutUserNfcRoutineDataInput
  upsert: RoutineUpsertWithoutUserNfcRoutineInput
}

input RoutineUpdateWithoutUserDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
  userNfcRoutine: User_nfc_routineUpdateOneRequiredWithoutRoutineInput
}

input RoutineUpdateWithoutUserNfcRoutineDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutRoutinesInput
}

input RoutineUpdateWithWhereUniqueWithoutUserInput {
  data: RoutineUpdateWithoutUserDataInput!
  where: RoutineWhereUniqueInput!
}

input RoutineUpsertWithoutUserNfcRoutineInput {
  create: RoutineCreateWithoutUserNfcRoutineInput!
  update: RoutineUpdateWithoutUserNfcRoutineDataInput!
}

input RoutineUpsertWithWhereUniqueWithoutUserInput {
  create: RoutineCreateWithoutUserInput!
  update: RoutineUpdateWithoutUserDataInput!
  where: RoutineWhereUniqueInput!
}

input RoutineWhereUniqueInput {
  id: Int
}

enum Sex {
  female
  male
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  birthdate: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  nickname: String!
  sex: Sex!
  updatedAt: DateTime!
}

input User_nfc_routineCreateOneWithoutRoutineInput {
  connect: User_nfc_routineWhereUniqueInput
  create: User_nfc_routineCreateWithoutRoutineInput
}

input User_nfc_routineCreateOneWithoutUserNfcInput {
  connect: User_nfc_routineWhereUniqueInput
  create: User_nfc_routineCreateWithoutUserNfcInput
}

input User_nfc_routineCreateWithoutRoutineInput {
  createdAt: DateTime
  daysArray: String!
  deletedAt: DateTime
  endTime: DateTime!
  fromTime: DateTime!
  result: ResultCreateManyWithoutUserNfcUserInput
  updatedAt: DateTime
  userNfc: User_nfcCreateOneWithoutNfcRoutineInput!
}

input User_nfc_routineCreateWithoutUserNfcInput {
  createdAt: DateTime
  daysArray: String!
  deletedAt: DateTime
  endTime: DateTime!
  fromTime: DateTime!
  result: ResultCreateManyWithoutUserNfcUserInput
  routine: RoutineCreateOneWithoutUserNfcRoutineInput!
  updatedAt: DateTime
}

input User_nfc_routineUpdateOneRequiredWithoutRoutineInput {
  connect: User_nfc_routineWhereUniqueInput
  create: User_nfc_routineCreateWithoutRoutineInput
  update: User_nfc_routineUpdateWithoutRoutineDataInput
  upsert: User_nfc_routineUpsertWithoutRoutineInput
}

input User_nfc_routineUpdateOneWithoutUserNfcInput {
  connect: User_nfc_routineWhereUniqueInput
  create: User_nfc_routineCreateWithoutUserNfcInput
  delete: Boolean
  disconnect: Boolean
  update: User_nfc_routineUpdateWithoutUserNfcDataInput
  upsert: User_nfc_routineUpsertWithoutUserNfcInput
}

input User_nfc_routineUpdateWithoutRoutineDataInput {
  createdAt: DateTime
  daysArray: String
  deletedAt: DateTime
  endTime: DateTime
  fromTime: DateTime
  id: Int
  result: ResultUpdateManyWithoutUserNfcUserInput
  updatedAt: DateTime
  userNfc: User_nfcUpdateOneRequiredWithoutNfcRoutineInput
}

input User_nfc_routineUpdateWithoutUserNfcDataInput {
  createdAt: DateTime
  daysArray: String
  deletedAt: DateTime
  endTime: DateTime
  fromTime: DateTime
  id: Int
  result: ResultUpdateManyWithoutUserNfcUserInput
  routine: RoutineUpdateOneRequiredWithoutUserNfcRoutineInput
  updatedAt: DateTime
}

input User_nfc_routineUpsertWithoutRoutineInput {
  create: User_nfc_routineCreateWithoutRoutineInput!
  update: User_nfc_routineUpdateWithoutRoutineDataInput!
}

input User_nfc_routineUpsertWithoutUserNfcInput {
  create: User_nfc_routineCreateWithoutUserNfcInput!
  update: User_nfc_routineUpdateWithoutUserNfcDataInput!
}

input User_nfc_routineWhereUniqueInput {
  id: Int
}

input User_nfcCreateManyWithoutUserInput {
  connect: [User_nfcWhereUniqueInput!]
  create: [User_nfcCreateWithoutUserInput!]
}

input User_nfcCreateOneWithoutNfcRoutineInput {
  connect: User_nfcWhereUniqueInput
  create: User_nfcCreateWithoutNfcRoutineInput
}

input User_nfcCreateWithoutNfcRoutineInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  nfc: NfcCreateOneWithoutUserNfcInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUser_nfcsInput!
}

input User_nfcCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  nfc: NfcCreateOneWithoutUserNfcInput!
  nfcRoutine: User_nfc_routineCreateOneWithoutUserNfcInput
  updatedAt: DateTime
}

input User_nfcScalarWhereInput {
  AND: [User_nfcScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  description: StringFilter
  id: IntFilter
  NOT: [User_nfcScalarWhereInput!]
  OR: [User_nfcScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input User_nfcUpdateManyDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  updatedAt: DateTime
}

input User_nfcUpdateManyWithoutUserInput {
  connect: [User_nfcWhereUniqueInput!]
  create: [User_nfcCreateWithoutUserInput!]
  delete: [User_nfcWhereUniqueInput!]
  deleteMany: [User_nfcScalarWhereInput!]
  disconnect: [User_nfcWhereUniqueInput!]
  set: [User_nfcWhereUniqueInput!]
  update: [User_nfcUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [User_nfcUpdateManyWithWhereNestedInput!]
  upsert: [User_nfcUpsertWithWhereUniqueWithoutUserInput!]
}

input User_nfcUpdateManyWithWhereNestedInput {
  data: User_nfcUpdateManyDataInput!
  where: User_nfcScalarWhereInput!
}

input User_nfcUpdateOneRequiredWithoutNfcRoutineInput {
  connect: User_nfcWhereUniqueInput
  create: User_nfcCreateWithoutNfcRoutineInput
  update: User_nfcUpdateWithoutNfcRoutineDataInput
  upsert: User_nfcUpsertWithoutNfcRoutineInput
}

input User_nfcUpdateWithoutNfcRoutineDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  nfc: NfcUpdateOneRequiredWithoutUserNfcInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutUser_nfcsInput
}

input User_nfcUpdateWithoutUserDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  nfc: NfcUpdateOneRequiredWithoutUserNfcInput
  nfcRoutine: User_nfc_routineUpdateOneWithoutUserNfcInput
  updatedAt: DateTime
}

input User_nfcUpdateWithWhereUniqueWithoutUserInput {
  data: User_nfcUpdateWithoutUserDataInput!
  where: User_nfcWhereUniqueInput!
}

input User_nfcUpsertWithoutNfcRoutineInput {
  create: User_nfcCreateWithoutNfcRoutineInput!
  update: User_nfcUpdateWithoutNfcRoutineDataInput!
}

input User_nfcUpsertWithWhereUniqueWithoutUserInput {
  create: User_nfcCreateWithoutUserInput!
  update: User_nfcUpdateWithoutUserDataInput!
  where: User_nfcWhereUniqueInput!
}

input User_nfcWhereUniqueInput {
  id: Int
}

type UserAccount {
  id: Int!
  provider: Provider!
  snsId: String!
}

input UserAccountCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  provider: Provider!
  snsId: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserAccountInput
}

input UserAccountCreateOneWithoutUserInput {
  connect: UserAccountWhereUniqueInput
  create: UserAccountCreateWithoutUserInput
}

input UserAccountCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  provider: Provider!
  snsId: String!
  updatedAt: DateTime
}

input UserAccountUpdateInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  provider: Provider
  snsId: String
  updatedAt: DateTime
  user: UserUpdateOneWithoutUserAccountInput
}

input UserAccountUpdateOneRequiredWithoutUserInput {
  connect: UserAccountWhereUniqueInput
  create: UserAccountCreateWithoutUserInput
  update: UserAccountUpdateWithoutUserDataInput
  upsert: UserAccountUpsertWithoutUserInput
}

input UserAccountUpdateWithoutUserDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  provider: Provider
  snsId: String
  updatedAt: DateTime
}

input UserAccountUpsertWithoutUserInput {
  create: UserAccountCreateWithoutUserInput!
  update: UserAccountUpdateWithoutUserDataInput!
}

input UserAccountWhereUniqueInput {
  id: Int
  snsId: String
}

input UserCreateInput {
  birthdate: DateTime!
  createdAt: DateTime
  deletedAt: DateTime
  nickname: String!
  routines: RoutineCreateManyWithoutUserInput
  sex: Sex!
  updatedAt: DateTime
  user_nfcs: User_nfcCreateManyWithoutUserInput
  userAccount: UserAccountCreateOneWithoutUserInput!
  userPushId: String
}

input UserCreateOneWithoutRoutinesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRoutinesInput
}

input UserCreateOneWithoutUser_nfcsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUser_nfcsInput
}

input UserCreateOneWithoutUserAccountInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserAccountInput
}

input UserCreateWithoutRoutinesInput {
  birthdate: DateTime!
  createdAt: DateTime
  deletedAt: DateTime
  nickname: String!
  sex: Sex!
  updatedAt: DateTime
  user_nfcs: User_nfcCreateManyWithoutUserInput
  userAccount: UserAccountCreateOneWithoutUserInput!
  userPushId: String
}

input UserCreateWithoutUser_nfcsInput {
  birthdate: DateTime!
  createdAt: DateTime
  deletedAt: DateTime
  nickname: String!
  routines: RoutineCreateManyWithoutUserInput
  sex: Sex!
  updatedAt: DateTime
  userAccount: UserAccountCreateOneWithoutUserInput!
  userPushId: String
}

input UserCreateWithoutUserAccountInput {
  birthdate: DateTime!
  createdAt: DateTime
  deletedAt: DateTime
  nickname: String!
  routines: RoutineCreateManyWithoutUserInput
  sex: Sex!
  updatedAt: DateTime
  user_nfcs: User_nfcCreateManyWithoutUserInput
  userPushId: String
}

input UserPushIdUserAccountCompoundUniqueInput {
  userAccount: Int!
  userPushId: String!
}

input UserUpdateInput {
  birthdate: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  nickname: String
  routines: RoutineUpdateManyWithoutUserInput
  sex: Sex
  updatedAt: DateTime
  user_nfcs: User_nfcUpdateManyWithoutUserInput
  userAccount: UserAccountUpdateOneRequiredWithoutUserInput
  userPushId: String
}

input UserUpdateOneRequiredWithoutRoutinesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRoutinesInput
  update: UserUpdateWithoutRoutinesDataInput
  upsert: UserUpsertWithoutRoutinesInput
}

input UserUpdateOneRequiredWithoutUser_nfcsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUser_nfcsInput
  update: UserUpdateWithoutUser_nfcsDataInput
  upsert: UserUpsertWithoutUser_nfcsInput
}

input UserUpdateOneWithoutUserAccountInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserAccountInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutUserAccountDataInput
  upsert: UserUpsertWithoutUserAccountInput
}

input UserUpdateWithoutRoutinesDataInput {
  birthdate: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  nickname: String
  sex: Sex
  updatedAt: DateTime
  user_nfcs: User_nfcUpdateManyWithoutUserInput
  userAccount: UserAccountUpdateOneRequiredWithoutUserInput
  userPushId: String
}

input UserUpdateWithoutUser_nfcsDataInput {
  birthdate: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  nickname: String
  routines: RoutineUpdateManyWithoutUserInput
  sex: Sex
  updatedAt: DateTime
  userAccount: UserAccountUpdateOneRequiredWithoutUserInput
  userPushId: String
}

input UserUpdateWithoutUserAccountDataInput {
  birthdate: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  nickname: String
  routines: RoutineUpdateManyWithoutUserInput
  sex: Sex
  updatedAt: DateTime
  user_nfcs: User_nfcUpdateManyWithoutUserInput
  userPushId: String
}

input UserUpsertWithoutRoutinesInput {
  create: UserCreateWithoutRoutinesInput!
  update: UserUpdateWithoutRoutinesDataInput!
}

input UserUpsertWithoutUser_nfcsInput {
  create: UserCreateWithoutUser_nfcsInput!
  update: UserUpdateWithoutUser_nfcsDataInput!
}

input UserUpsertWithoutUserAccountInput {
  create: UserCreateWithoutUserAccountInput!
  update: UserUpdateWithoutUserAccountDataInput!
}

input UserWhereUniqueInput {
  id: Int
  userPushId_userAccount: UserPushIdUserAccountCompoundUniqueInput
}
